#!/bin/bash

package="executeF2MD"
HELP="\n$HELP $package - used to automatically execute F2MD (if it was installed correctly previously)\n"
HELP="$HELP \n"
HELP="$HELP $package [options]\n"
HELP="$HELP \n"
HELP="$HELP options:\n"
HELP="$HELP -h,  --help                                 show brief help\n"
HELP="$HELP -s,  --scenario SCENARIO                    set this flag to determine the Scenario to use\n"
HELP="$HELP -a,  --app-type APP_TYPE                    specify the app to detect misbehavior with\n"
HELP="$HELP -c,  --check-type CHECK_TYPE                specify the type of plausibility detectors to use\n"
HELP="$HELP -ad, --attacker-density ATTACKER_DENSITY    set the attacker density of the model\n"
HELP="$HELP -ml, --ml-type ML_TYPE                      specify the type of machine learning to be used if an\n"
HELP="$HELP -t,  --threshold THRESHOLD                  specify the threshold above which the probability given back by the ml algorithm is misbehavior or not\n"
HELP="$HELP -fs, --feat-start FEAT_START                specify the start of the original feature part to be taken for ML prediction"
HELP="$HELP -fe, --feat-end FEAT_END                    specify the end of the original feature part to be taken for ML prediction"
HELP="$HELP -sd, --save-data SAVE_DATA                  specify whether to save data or not from the machine learning model\n"

POSITIONAL=()
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
    -h | --help)
        printf "$HELP"
        exit 0
        shift # past argument
        shift # past value
        ;;
    -s | --scenario)
        SCENARIO="$2"
        shift # past argument
        shift # past value
        ;;
    -a | --app-type)
        APP_TYPE="$2"
        shift # past argument
        shift # past value
        ;;
    -c | --check-type)
        CHECK_TYPE="$2"
        shift # past argument
        shift # past value
        ;;
    -ad | --attacker-density)
        ATTACKER_DENSITY="$2"
        shift # past argument
        shift # past value
        ;;
    -ml | --ml-type)
        ML_TYPE="$2"
        shift # past argument
        shift # past value
        ;;
    -sd | --save-data)
        SAVE_DATA="$2"
        shift # past argument
        shift # past value
        ;;
    -t | --threshold)
        THRESHOLD="$2"
        shift # past argument
        shift # past value
        ;;
    -fs | --feat-start)
        FEAT_START="$2"
        shift # past argument
        shift # past value
        ;;
    -fe | --feat-end)
        FEAT_END="$2"
        shift # past argument
        shift # past value
        ;;
    -l | --logging)
        LOGGING="YES"
        shift # past argument
        ;;
    -at | --attach)
        ATTACH="YES"
        shift # past argument
        ;;
    *)                     # unknown option
        POSITIONAL+=("$1") # save it in an array for later
        shift              # past argument
        ;;
    esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [[ $SCENARIO == "" ]]; then
    PS3='Please choose a scenario: '
    options_net=("IRTSystemXScenario" "LuSTNanoScenario" "LuSTMiniScenario" "LuSTScenario" "UlmScenario")
    select opt_net in "${options_net[@]}"; do
        case $opt_net in
        "IRTSystemXScenario")
            echo
            echo "you chose choice $REPLY which is $opt_net"
            SCENARIO=0
            break
            ;;
        "LuSTNanoScenario")
            echo
            echo "you chose choice $REPLY which is $opt_net"
            SCENARIO=1
            break
            ;;
        "LuSTMiniScenario")
            echo
            echo "you chose choice $REPLY which is $opt_net"
            SCENARIO=2
            break
            ;;
        "LuSTScenario")
            echo
            echo "you chose choice $REPLY which is $opt_net"
            SCENARIO=3
            break
            ;;
        "UlmScenario")
            echo
            echo "you chose choice $REPLY which is $opt_net"
            SCENARIO=4
            break
            ;;
        *)
            echo
            echo "invalid option $REPLY"
            exit 1
            ;;
        esac
    done
fi

if [[ $APP_TYPE == "" ]]; then
    PS3='Please choose a app to be used for misbehavior detection: '
    options_app=("ThresholdApp" "AggregationApp" "BehavioralApp" "ExperiApp" "CooperativeApp" "MachineLearningApp")
    select opt_app in "${options_app[@]}"; do
        case $opt_app in
        "ThresholdApp")
            echo
            echo "you chose choice $REPLY which is $opt_app"
            APP_TYPE=0
            break
            ;;
        "AggregationApp")
            echo
            echo "you chose choice $REPLY which is $opt_app"
            APP_TYPE=1
            break
            ;;
        "BehavioralApp")
            echo
            echo "you chose choice $REPLY which is $opt_app"
            APP_TYPE=2
            break
            ;;
        "ExperiApp")
            echo
            echo "you chose choice $REPLY which is $opt_app"
            APP_TYPE=3
            break
            ;;
        "CooperativeApp")
            echo
            echo "you chose choice $REPLY which is $opt_app"
            APP_TYPE=4
            break
            ;;
        "MachineLearningApp")
            echo
            echo "you chose choice $REPLY which is $opt_app"
            APP_TYPE=5
            break
            ;;
        *)
            echo
            echo "invalid option $REPLY"
            exit 1
            ;;
        esac
    done
fi

if [[ $CHECK_TYPE == "" ]]; then
    PS3='Please choose a type of plausibility detectors: '
    options_check=("LegacyChecks" "CatchChecks" "ExperiChecks")
    select opt_check in "${options_check[@]}"; do
        case $opt_check in
        "LegacyChecks")
            echo
            echo "you chose choice $REPLY which is $opt_check"
            CHECK_TYPE=0
            break
            ;;
        "CatchChecks")
            echo
            echo "you chose choice $REPLY which is $opt_check"
            CHECK_TYPE=1
            break
            ;;
        "ExperiChecks")
            echo
            echo "you chose choice $REPLY which is $opt_check"
            CHECK_TYPE=2
            break
            ;;
        *)
            echo
            echo "invalid option $REPLY"
            exit 1
            ;;
        esac
    done
fi

if [[ $ATTACKER_DENSITY == "" ]]; then
    read -r -p "Please choose an attacker density (as percent number or float between 0 and 1): " ATTACKER_DENSITY
    if [[ "$ATTACKER_DENSITY" =~ ^[[:digit:].e+-]+$ ]] && echo "$ATTACKER_DENSITY>100 && $ATTACKER_DENSITY<0" | bc -l | grep -q 1; then
        echo "${ATTACKER_DENSITY} is out of bounds"
        exit 1
    fi
fi

if [[ $APP_TYPE != 5 ]]; then
    echo "Starting F2MD with following configuration:"
    echo "Scenario: ${SCENARIO} (${opt_net})"
    echo "App Type: ${APP_TYPE} (${opt_app})"
    echo "Plausibility Detector Type: ${CHECK_TYPE} (${opt_check})"
    echo "Attacker Density: ${ATTACKER_DENSITY}"
    tmux new-session -s F2MD -n etc -d "cd /etc; bash -i"
    if [[ $LOGGING == "YES" ]]; then
        tmux new-window -t F2MD:1 -n var "cd /F2MD/; ./launchSumoTraciDaemon -ng > traci-log.txt; bash -i"
    else
        tmux new-window -t F2MD:1 -n var "cd /F2MD/; ./launchSumoTraciDaemon -ng; bash -i"
    fi
    python3 /F2MD/change-ini-params.py "${SCENARIO}" "${APP_TYPE}" "${CHECK_TYPE}" "${ATTACKER_DENSITY}"
    sleep 25
    tmux set-window-option -g remain-on-exit off
    if [[ $LOGGING == "YES" ]]; then
        tmux new-window -t F2MD:2 -n var2 "cd /F2MD/; ./runScenario -s "${SCENARIO}" -t "0" -e "0" > run-log.txt; bash -i"
    else
        tmux new-window -t F2MD:2 -n var2 "cd /F2MD/; ./runScenario -s "${SCENARIO}" -t "0" -e "0"; bash -i"
    fi
    if [[ $ATTACH == "YES" ]]; then
        tmux attach -t F2MD:2
    fi
else
    if [[ $ML_TYPE == "" ]]; then
        PS3='Please choose a type of ML algorithm: '
        options_ml=("SVM_SINGLE" "MLP_SINGLE_L1N25" "MLP_SINGLE_L3N25" "LSTM_RECURRENT")
        select opt_ml in "${options_ml[@]}"; do
            case $opt_ml in
            "SVM_SINGLE")
                echo
                echo "you chose choice $REPLY which is $opt_ml"
                ML_TYPE="SVM_SINGLE"
                break
                ;;
            "MLP_SINGLE_L1N25")
                echo
                echo "you chose choice $REPLY which is $opt_ml"
                ML_TYPE="MLP_SINGLE_L1N25"
                break
                ;;
            "MLP_SINGLE_L3N25")
                echo
                echo "you chose choice $REPLY which is $opt_ml"
                ML_TYPE="MLP_SINGLE_L3N25"
                break
                ;;
            "LSTM_RECURRENT")
                echo
                echo "you chose choice $REPLY which is $opt_ml"
                ML_TYPE="LSTM_RECURRENT"
                break
                ;;
            *)
                echo
                echo "invalid option $REPLY"
                exit 1
                ;;
            esac
        done
    fi

    if [[ $SAVE_DATA == "" ]]; then
        PS3='Please choose if you need to save the data or not: '
        options_save=("Save Data" "Don't Save")
        select opt_save in "${options_save[@]}"; do
            case $opt_save in
            "Save Data")
                echo
                echo "you chose choice $REPLY which is $opt_save"
                SAVE_DATA=1
                break
                ;;
            "Don't Save")
                echo
                echo "you chose choice $REPLY which is $opt_save"
                SAVE_DATA=0
                break
                ;;
            *)
                echo
                echo "invalid option $REPLY"
                exit 1
                ;;
            esac
        done
    fi

    if [[ $THRESHOLD == "" ]]; then
        read -r -p "Please choose a threshold for the ml probability (as percent number or float between 0 and 1): " THRESHOLD
        if [[ "$THRESHOLD" =~ ^[[:digit:].e+-]+$ ]] && echo "$THRESHOLD>100 && $THRESHOLD<0" | bc -l | grep -q 1; then
            echo "${THRESHOLD} is out of bounds"
            exit 1
        fi
    fi

    if [[ $FEAT_START == "" ]]; then
        read -r -p "Please choose the start of the feature space to be taken: " FEAT_START
        if [[ "$FEAT_START" =~ ^[[:digit:].e+-]+$ ]] && echo "$FEAT_START>100 && $FEAT_START<0" | bc -l | grep -q 1; then
            echo "${FEAT_START} is out of bounds"
            exit 1
        fi
    fi

    if [[ $FEAT_END == "" ]]; then
        read -r -p "Please choose the end of the feature space to be taken: " FEAT_END
        if [[ "$FEAT_END" =~ ^[[:digit:].e+-]+$ ]] && echo "$FEAT_END>100 && $FEAT_END<0" | bc -l | grep -q 1; then
            echo "${FEAT_END} is out of bounds"
            exit 1
        fi
    fi

    echo "Starting F2MD with following configuration:"
    echo "Scenario: ${SCENARIO} (${opt_net})"
    echo "App Type: ${APP_TYPE} (${opt_app})"
    echo "Plausibility Detector Type: ${CHECK_TYPE} (${opt_check})"
    echo "Attacker Density: ${ATTACKER_DENSITY}"
    echo "Machine Learning Type: ${ML_TYPE}"
    echo "Saving Data: ${SAVE_DATA} (${opt_save})"
    echo "Threshold for ML is: ${THRESHOLD}"
    echo "Feat start for ML is: ${FEAT_START}"
    echo "Feat end for ML is: ${FEAT_END}"
    tmux new-session -s F2MD -n etc -d "cd /etc; bash -i"
    if [[ $LOGGING == "YES" ]]; then
        tmux new-window -t F2MD:1 -n var "cd /F2MD/machine-learning-server; ./launchMLServer ${ML_TYPE} ${SAVE_DATA} ${THRESHOLD} ${FEAT_START} ${FEAT_END} > ml-server-log.txt; bash -i"
    else
        tmux new-window -t F2MD:1 -n var "cd /F2MD/machine-learning-server; ./launchMLServer ${ML_TYPE} ${SAVE_DATA} ${THRESHOLD} ${FEAT_START} ${FEAT_END}; bash -i"
    fi
    if [[ $LOGGING == "YES" ]]; then
        tmux new-window -t F2MD:2 -n var "cd /F2MD/; ./launchSumoTraciDaemon -ng > traci-log.txt; bash -i"
    else
        tmux new-window -t F2MD:2 -n var "cd /F2MD/; ./launchSumoTraciDaemon -ng; bash -i"
    fi
    python3 /F2MD/change-ini-params.py "${SCENARIO}" "${APP_TYPE}" "${CHECK_TYPE}" "${ATTACKER_DENSITY}"
    sleep 100
    tmux set-window-option -g remain-on-exit off
    if [[ $LOGGING == "YES" ]]; then
        tmux new-window -t F2MD:3 -n var2 "cd /F2MD/; ./runScenario -s "${SCENARIO}" -t "0" -e "0" > run-log.txt; bash -i"
    else
        tmux new-window -t F2MD:3 -n var2 "cd /F2MD/; ./runScenario -s "${SCENARIO}" -t "0" -e "0"; bash -i"
    fi
    if [[ $ATTACH == "YES" ]]; then
        tmux attach -t F2MD:3
    fi
fi
